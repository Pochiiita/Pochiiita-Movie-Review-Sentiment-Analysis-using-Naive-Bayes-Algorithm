import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import stopwords

#Inductive Learning Method
df = pd.read_csv('Dataset\IMDB Dataset.csv')

print(df.head())

# Preprocess the data
nltk.download('stopwords')
stop_words = stopwords.words('english')

def preprocess_text(text):
    text = ' '.join([word for word in text.split() if word.lower() not in stop_words])
    return text

df['review'] = df['review'].apply(preprocess_text)

X_train, X_test, y_train, y_test = train_test_split(df['review'], df['sentiment'], test_size=0.2, random_state=42)

model = make_pipeline(TfidfVectorizer(max_features=10000, stop_words='english'), MultinomialNB())

#Inductive Learning starts here where the model is trained on the training data
model.fit(X_train, y_train)

# Perform cross-validation on the training set
cv_scores = cross_val_score(model, X_train, y_train, cv=5)
print(f'Cross-Validation Accuracy Scores: {cv_scores}')
print(f'Mean Cross-Validation Accuracy: {cv_scores.mean()}')

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(f'Test Accuracy: {accuracy_score(y_test, y_pred)}')
print(classification_report(y_test, y_pred))

#Transductive Learning Method
unlabeled_df = pd.read_csv('Dataset\IMDB_Movies.csv')

# Preprocess the unlabeled data
unlabeled_df['review'] = unlabeled_df['review'].apply(preprocess_text)

# Predict the labels of the unlabeled data
unlabeled_predictions = model.predict(unlabeled_df['review'])

# Add predictions to the dataframe
unlabeled_df['predicted_sentiment'] = unlabeled_predictions

# Save the results
unlabeled_df.to_csv('unlabeleddata_predictions.csv', index=False)

y_train_pred = model.predict(X_train)

train_accuracy = accuracy_score(y_train, y_train_pred)
train_classification_report = classification_report(y_train, y_train_pred, output_dict=True)

print(f'Training Accuracy: {train_accuracy}')
print(f'Training Classification Report:\n {classification_report(y_train, y_train_pred)}')

test_accuracy = accuracy_score(y_test, y_pred)
test_classification_report = classification_report(y_test, y_pred, output_dict=True)

print(f'Test Accuracy: {test_accuracy}')
print(f'Test Classification Report:\n {classification_report(y_test, y_pred)}')

#FOR COMPARISON PARA MADALI HIHI
print(f"Training Accuracy: {train_accuracy}")
print(f"Test Accuracy: {test_accuracy}")

# Compare precision, recall, and F1-score
print(f"Training Precision: {train_classification_report['weighted avg']['precision']}")
print(f"Test Precision: {test_classification_report['weighted avg']['precision']}")
print(f"Training Recall: {train_classification_report['weighted avg']['recall']}")
print(f"Test Recall: {test_classification_report['weighted avg']['recall']}")
print(f"Training F1-Score: {train_classification_report['weighted avg']['f1-score']}")
print(f"Test F1-Score: {test_classification_report['weighted avg']['f1-score']}")